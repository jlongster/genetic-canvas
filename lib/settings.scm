
(define min-red 0.)
(define max-red 1.)
(define min-green 0.)
(define max-green 1.)
(define min-blue 0.)
(define max-blue 1.)

(define (optimize-settings image)
  (let ((bytes (image-bytes image)))
    (let loop ((min-r 1.)
               (min-g 1.)
               (min-b 1.)
               (max-r 0.)
               (max-g 0.)
               (max-b 0.)
               (i 0))
      (if (< i (* (image-width image)
                  (image-height image)
                  4))
          (let ((r (byte->real (u8*-ref bytes i)))
                (g (byte->real (u8*-ref bytes (+ i 1))))
                (b (byte->real (u8*-ref bytes (+ i 2)))))
            (loop (min min-r r)
                  (min min-g g)
                  (min min-b b)
                  (max max-r r)
                  (max max-g g)
                  (max max-b b)
                  (+ i 4)))
          (begin
            (set! min-red min-r)
            (set! max-red max-r)
            (set! min-green min-g)
            (set! max-green max-g)
            (set! min-blue min-b)
            (set! max-blue max-b))))))
